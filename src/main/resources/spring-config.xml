<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--<import resource="classpath:spring-mybatis.xml" />-->

    <!-- 扫描注解Bean 排除controller-->
    <context:component-scan base-package="com.stt">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 定义事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 定义事务策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--所有以query开头的方法都是只读的 -->
            <tx:method name="query*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <!--其他方法使用默认事务策略 -->
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="myPointcut" expression="execution(* com.stt.service.*.*(..))" />
        <!--将定义好的事务处理策略应用到上述的切入点 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
    </aop:config>

    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!--Spring3.0 对异常的处理方式总共有两种：-->
    <!--一种是使用 HandlerExceptionResolver 接口，并且 Spring 已经提供默认的实现类 SimpleMappingExceptionResolver。-->
    <!--第二种方法是在 Controller 内部实现，灵活性更高。这两种方式不能共存。我们一般在项目中使用第一种方法-->

    <!--自定义实现类与默认的实现类，可同时使用。-->
    <!--自定义的实现类实现HandlerExceptionResolver接口 -->
    <!--<bean id="exceptionHandler" class="com.enh.test.CustomExceptionHandler"/>-->


    <!-- 默认的实现类注入 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 为所有的异常定义默认的异常处理页面，exceptionMappings未定义的异常使用本默认配置 -->
        <property name="defaultErrorView" value="errors/error"></property>
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <property name="exceptionAttribute" value="ex"></property>
        <!--
    　　　　定义需要特殊处理的异常，用类名或完全路径名作为key，异常页文件名作为值，
    　　　　将不同的异常映射到不同的页面上。
    　　 -->
        <!--<property name="exceptionMappings">-->
            <!--<props>-->
                <!--<prop key="IOException">error/ioexp</prop>-->
                <!--<prop key="java.sql.SQLException">error/sqlexp</prop>-->
            <!--</props>-->
        <!--</property>-->
    </bean>

</beans>

